digraph "classes" {
rankdir=BT
charset="utf-8"
"src.factories.agent_factory.AgentFactory" [color="black", fontcolor="black", label=<{AgentFactory|<br ALIGN="LEFT"/>|<I>create_asset</I>(asset_type: str, jid: str, max_power_usage_kw: Optional[float], logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], parent: Optional[JID]): BaseProsumptionAgent<br ALIGN="LEFT"/><I>create_interaction_agent</I>(interaction_agent_type: str, jid: str, password: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int]): BaseInteractionAgent<br ALIGN="LEFT"/><I>create_network_agent</I>(jid: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], parent: Optional[JID]): NetworkAgent<br ALIGN="LEFT"/><I>create_time_agent</I>(domain: str, start_sim_timestamp: datetime, end_sim_timestamp: datetime, rate: float, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int]): TimeAgent<br ALIGN="LEFT"/><I>create_weather_agent</I>(domain: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], period: Optional[int]): WeatherAgent<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.interaction_agents.base_interaction_agent.BaseInteractionAgent" [color="black", fontcolor="black", label=<{BaseInteractionAgent|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"src.agents.prosumption_agents.base_prosumption_agent.BaseProsumptionAgent" [color="black", fontcolor="black", label=<{BaseProsumptionAgent|max_power_usage_kw<br ALIGN="LEFT"/>parent : NoneType<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>type : Optional[ComponentType]<br ALIGN="LEFT"/>|on_unavailable_handler(): None<br ALIGN="LEFT"/>save_power_update(datetimestamp: str, value: float): None<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" [color="black", fontcolor="black", label=<{ChargingStationAgent|behaviour<br ALIGN="LEFT"/>cpo : Optional[JID]<br ALIGN="LEFT"/>ev_jid<br ALIGN="LEFT"/>factor : Optional[float]<br ALIGN="LEFT"/>is_charging : bool<br ALIGN="LEFT"/>net_power_usage_kw<br ALIGN="LEFT"/>send_info_behaviour<br ALIGN="LEFT"/>smart : bool<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>time_subscription_behaviour<br ALIGN="LEFT"/>|setup(): None<br ALIGN="LEFT"/>smart_charging(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationBehaviour" [color="black", fontcolor="black", label=<{ChargingStationBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationSendInfoBehaviour" [color="black", fontcolor="black", label=<{ChargingStationSendInfoBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.component_agent.ComponentAgent" [color="black", fontcolor="black", label=<{ComponentAgent|domain<br ALIGN="LEFT"/>net_power_usage_kw<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>|send_power_update_to_parent(): None<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoAgent" [color="black", fontcolor="black", label=<{CpoAgent|behaviour<br ALIGN="LEFT"/>charging_stations : list<br ALIGN="LEFT"/>receive_cs_info_behaviour<br ALIGN="LEFT"/>subscription_behaviour<br ALIGN="LEFT"/>|setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoBehaviour" [color="black", fontcolor="black", label=<{CpoBehaviour|agent<br ALIGN="LEFT"/>|<I>run</I>(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoReceiveCSInfoBehaviour" [color="black", fontcolor="black", label=<{CpoReceiveCSInfoBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.logger.LoggerFactory" [color="black", fontcolor="black", label=<{LoggerFactory|default_log_threshold : int<br ALIGN="LEFT"/>formatter : Formatter<br ALIGN="LEFT"/>logfile : Optional[str]<br ALIGN="LEFT"/>|get_logger(logger_name: str, log_threshold: Optional[int]): logging.Logger<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.network_agent.NetworkAgent" [color="black", fontcolor="black", label=<{NetworkAgent|children<br ALIGN="LEFT"/>current_congestion : float<br ALIGN="LEFT"/>net_power_usage_kw<br ALIGN="LEFT"/>parent<br ALIGN="LEFT"/>time_subscription_behaviour<br ALIGN="LEFT"/>|save_power_update(datetimestamp: str, value: float): None<br ALIGN="LEFT"/>show_end_result(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.simple_agent.PeriodicInfoUpdate" [color="black", fontcolor="black", label=<{PeriodicInfoUpdate|agent<br ALIGN="LEFT"/>last_info : str<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.network_agent.PowerUpdateReceiveBehaviour" [color="black", fontcolor="black", label=<{PowerUpdateReceiveBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.PublishingAgentMixin" [color="black", fontcolor="black", label=<{PublishingAgentMixin|queues : Dict[str, MailingList]<br ALIGN="LEFT"/>|send_update(queue: str): None<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.time_agent.RateChangeBehaviour" [color="black", fontcolor="black", label=<{RateChangeBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.factories.real_agent_factory.RealAgentFactory" [color="black", fontcolor="black", label=<{RealAgentFactory|<br ALIGN="LEFT"/>|create_asset(asset_type: str, jid: str, max_power_usage_kw: Optional[float], logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], parent: Optional[JID]): BaseProsumptionAgent<br ALIGN="LEFT"/>create_interaction_agent(interaction_agent_type: str, jid: str, password: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int]): BaseInteractionAgent<br ALIGN="LEFT"/>create_network_agent(jid: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], parent: Optional[JID]): NetworkAgent<br ALIGN="LEFT"/>create_time_agent(domain: str, start_sim_timestamp: datetime, end_sim_timestamp: datetime, rate: float, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int]): TimeAgent<br ALIGN="LEFT"/>create_weather_agent(domain: str, logger_factory: Optional[LoggerFactory], log_threshold: Optional[int], period: Optional[int]): WeatherAgent<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.component_agent.RegisterAtParentBehaviour" [color="black", fontcolor="black", label=<{RegisterAtParentBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.network_agent.RegistrationReceiveBehaviour" [color="black", fontcolor="black", label=<{RegistrationReceiveBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.simple_agent.SimpleAgent" [color="black", fontcolor="black", label=<{SimpleAgent|info_behaviour<br ALIGN="LEFT"/>logger : NoneType, RootLogger, Logger<br ALIGN="LEFT"/>running<br ALIGN="LEFT"/>|format_num(number: float | int, decimals: int): str<br ALIGN="LEFT"/>get_info_message(message: Message): Message<br ALIGN="LEFT"/>print(): None<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>start(auto_register: bool): None<br ALIGN="LEFT"/>stop(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.simulation_runner.SimulationRunner" [color="black", fontcolor="black", label=<{SimulationRunner|assets : list[Agent]<br ALIGN="LEFT"/>configuration_file : str<br ALIGN="LEFT"/>domain : str<br ALIGN="LEFT"/>kill_now : bool<br ALIGN="LEFT"/>logger_factory<br ALIGN="LEFT"/>name : str<br ALIGN="LEFT"/>networks : list[Agent]<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>prosumption_agents : list[BaseProsumptionAgent]<br ALIGN="LEFT"/>|are_all_agents_running(): bool<br ALIGN="LEFT"/>exit_gracefully(): None<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.prosumption_agents.solar_panel_agent.SolarPanelAgent" [color="black", fontcolor="black", label=<{SolarPanelAgent|NOCT : int<br ALIGN="LEFT"/>NOMINAL_TEMPERATURE : int<br ALIGN="LEFT"/>REFERENCE_IRRADIANCE : int<br ALIGN="LEFT"/>TEMPERATURE_COEFFICIENT : float<br ALIGN="LEFT"/>ambient_temperature<br ALIGN="LEFT"/>cloud_coverage<br ALIGN="LEFT"/>factor : Optional[float]<br ALIGN="LEFT"/>ground_temperature<br ALIGN="LEFT"/>irradiance<br ALIGN="LEFT"/>net_power_usage_kw<br ALIGN="LEFT"/>rain<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>subscription_behaviour<br ALIGN="LEFT"/>time_subscription_behaviour<br ALIGN="LEFT"/>wind_speed_m_s<br ALIGN="LEFT"/>|calculate_cell_temperature(ambient_temp: float, solar_irradiance: float, wind_speed: float): float<br ALIGN="LEFT"/>calculate_efficiency(irradiance: float, temperature: float): float<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" [color="black", fontcolor="black", label=<{SubscriptionBehaviour|request_dict<br ALIGN="LEFT"/>request_timeout_seconds : int<br ALIGN="LEFT"/>subscriptions_dict : Dict[str, Dict[str, Callable[[Dict[str, Any]], None]]]<br ALIGN="LEFT"/>|receive_subscription_message(): None<br ALIGN="LEFT"/>run(): None<br ALIGN="LEFT"/>send_subscription_request(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionReceiverBehaviour" [color="black", fontcolor="black", label=<{SubscriptionReceiverBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>send_data(queue: str, recipient: Optional[JID]): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.time_agent.TimeAgent" [color="black", fontcolor="black", label=<{TimeAgent|rate_change_behaviour<br ALIGN="LEFT"/>real_broadcast_timestamp : datetime<br ALIGN="LEFT"/>sim_broadcast_timestamp<br ALIGN="LEFT"/>|end_simulation(): bool<br ALIGN="LEFT"/>rate(new_rate: float): None<br ALIGN="LEFT"/>send_update(queue: str): None<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>update_broadcast_timestamps(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [color="black", fontcolor="black", label=<{TimeKeepingMixin|behaviours : List[CyclicBehaviour]<br ALIGN="LEFT"/>rate<br ALIGN="LEFT"/>rate<br ALIGN="LEFT"/>real_broadcast_timestamp<br ALIGN="LEFT"/>real_broadcast_timestamp<br ALIGN="LEFT"/>sim_broadcast_timestamp<br ALIGN="LEFT"/>sim_broadcast_timestamp<br ALIGN="LEFT"/>sim_timestamp<br ALIGN="LEFT"/>|get_formatted_sim_timestamp(): str<br ALIGN="LEFT"/>process_time_message(data: Dict[str, Any]): None<br ALIGN="LEFT"/>time_subscription(domain: str): Dict[str, Dict[str, Callable[[Dict[str, Any]], None]]]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.weather_agent.WeatherAgent" [color="black", fontcolor="black", label=<{WeatherAgent|DEFAULT_PERIOD : int<br ALIGN="LEFT"/>ambient_temperature<br ALIGN="LEFT"/>cloud_coverage<br ALIGN="LEFT"/>ground_temperature<br ALIGN="LEFT"/>irradience<br ALIGN="LEFT"/>next_datetime : Optional[datetime]<br ALIGN="LEFT"/>rain<br ALIGN="LEFT"/>sun_intensity<br ALIGN="LEFT"/>time_subscription_behaviour<br ALIGN="LEFT"/>weather_behaviour<br ALIGN="LEFT"/>wind_speed_m_s<br ALIGN="LEFT"/>|get_weather_message(message: Message): Message<br ALIGN="LEFT"/>setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.weather_agent.WeatherBehaviour" [color="black", fontcolor="black", label=<{WeatherBehaviour|agent<br ALIGN="LEFT"/>|run(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.prosumption_agents.wind_turbine_agent.WindTurbineAgent" [color="black", fontcolor="black", label=<{WindTurbineAgent|MAX_WIND_SPEED_M_S : float<br ALIGN="LEFT"/>MIN_WIND_SPEED_M_S : float<br ALIGN="LEFT"/>factor : Optional[float]<br ALIGN="LEFT"/>net_power_usage_kw<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>subscription_behaviour<br ALIGN="LEFT"/>time_subscription_behaviour<br ALIGN="LEFT"/>wind_speed_m_s<br ALIGN="LEFT"/>wind_speed_m_s : float<br ALIGN="LEFT"/>|setup(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.agents.component_agent.ComponentAgent" -> "src.agents.simple_agent.SimpleAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.interaction_agents.base_interaction_agent.BaseInteractionAgent" -> "src.agents.simple_agent.SimpleAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.interaction_agents.cpo_agent.CpoAgent" -> "src.agents.interaction_agents.base_interaction_agent.BaseInteractionAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.network_agent.NetworkAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.network_agent.NetworkAgent" -> "src.agents.component_agent.ComponentAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.base_prosumption_agent.BaseProsumptionAgent" -> "src.agents.component_agent.ComponentAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" -> "src.agents.prosumption_agents.base_prosumption_agent.BaseProsumptionAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.solar_panel_agent.SolarPanelAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.solar_panel_agent.SolarPanelAgent" -> "src.agents.prosumption_agents.base_prosumption_agent.BaseProsumptionAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.wind_turbine_agent.WindTurbineAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.prosumption_agents.wind_turbine_agent.WindTurbineAgent" -> "src.agents.prosumption_agents.base_prosumption_agent.BaseProsumptionAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.simple_agent.SimpleAgent" -> "src.agents.common_behaviours.subscribeable_behaviour.PublishingAgentMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.time_agent.TimeAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.time_agent.TimeAgent" -> "src.agents.simple_agent.SimpleAgent" [arrowhead="empty", arrowtail="none"];
"src.agents.weather_agent.WeatherAgent" -> "src.agents.common_behaviours.time_keeping_mixin.TimeKeepingMixin" [arrowhead="empty", arrowtail="none"];
"src.agents.weather_agent.WeatherAgent" -> "src.agents.simple_agent.SimpleAgent" [arrowhead="empty", arrowtail="none"];
"src.factories.real_agent_factory.RealAgentFactory" -> "src.factories.agent_factory.AgentFactory" [arrowhead="empty", arrowtail="none"];
"src.agents.common_behaviours.subscribeable_behaviour.PublishingAgentMixin" -> "src.agents.common_behaviours.subscribeable_behaviour.SubscriptionReceiverBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.interaction_agents.cpo_agent.CpoAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.network_agent.NetworkAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.prosumption_agents.solar_panel_agent.SolarPanelAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.prosumption_agents.solar_panel_agent.SolarPanelAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.prosumption_agents.wind_turbine_agent.WindTurbineAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.prosumption_agents.wind_turbine_agent.WindTurbineAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionBehaviour" -> "src.agents.weather_agent.WeatherAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="time_subscription_behaviour", style="solid"];
"src.agents.common_behaviours.subscribeable_behaviour.SubscriptionReceiverBehaviour" -> "src.agents.common_behaviours.subscribeable_behaviour.PublishingAgentMixin" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_subscription_receiver_behaviour", style="solid"];
"src.agents.component_agent.ComponentAgent" -> "src.agents.component_agent.RegisterAtParentBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoAgent" -> "src.agents.interaction_agents.cpo_agent.CpoBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoAgent" -> "src.agents.interaction_agents.cpo_agent.CpoReceiveCSInfoBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoBehaviour" -> "src.agents.interaction_agents.cpo_agent.CpoAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="behaviour", style="solid"];
"src.agents.interaction_agents.cpo_agent.CpoReceiveCSInfoBehaviour" -> "src.agents.interaction_agents.cpo_agent.CpoAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="receive_cs_info_behaviour", style="solid"];
"src.agents.network_agent.NetworkAgent" -> "src.agents.network_agent.PowerUpdateReceiveBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.network_agent.NetworkAgent" -> "src.agents.network_agent.RegistrationReceiveBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.network_agent.NetworkAgent" -> "src.simulation_runner.SimulationRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_main_network_agent", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" -> "src.agents.prosumption_agents.charging_station_agent.ChargingStationBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" -> "src.agents.prosumption_agents.charging_station_agent.ChargingStationSendInfoBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationBehaviour" -> "src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="behaviour", style="solid"];
"src.agents.prosumption_agents.charging_station_agent.ChargingStationSendInfoBehaviour" -> "src.agents.prosumption_agents.charging_station_agent.ChargingStationAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="send_info_behaviour", style="solid"];
"src.agents.simple_agent.PeriodicInfoUpdate" -> "src.agents.simple_agent.SimpleAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="info_behaviour", style="solid"];
"src.agents.simple_agent.SimpleAgent" -> "src.agents.simple_agent.PeriodicInfoUpdate" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.time_agent.RateChangeBehaviour" -> "src.agents.time_agent.TimeAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rate_change_behaviour", style="solid"];
"src.agents.time_agent.TimeAgent" -> "src.agents.time_agent.RateChangeBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.time_agent.TimeAgent" -> "src.simulation_runner.SimulationRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_time_agent", style="solid"];
"src.agents.weather_agent.WeatherAgent" -> "src.agents.weather_agent.WeatherBehaviour" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="agent", style="solid"];
"src.agents.weather_agent.WeatherAgent" -> "src.simulation_runner.SimulationRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_weather_agent", style="solid"];
"src.agents.weather_agent.WeatherBehaviour" -> "src.agents.weather_agent.WeatherAgent" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="weather_behaviour", style="solid"];
"src.utils.logger.LoggerFactory" -> "src.simulation_runner.SimulationRunner" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="logger_factory", style="solid"];
"src.factories.agent_factory.AgentFactory" -> "src.simulation_runner.SimulationRunner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_agent_factory", style="solid"];
}
